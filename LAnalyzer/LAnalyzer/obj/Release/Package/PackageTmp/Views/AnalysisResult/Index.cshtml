@model LAnalyzer.Models.AnalysisResult
@{
    ViewBag.Title = Model.ProjectName;
}

<h2>Project : @Model.ProjectName</h2>
@using (Html.BeginForm("Index", "AnalysisResult", FormMethod.Post))
{
    int mySelections = 0;
    List<int> mySelVal = new List<int>();
    if (Request.Form["noSelections"] != null)
    {
        mySelections = int.Parse(Request.Form["noSelections"]);
    }
    // Hidden field to indicate if Calculate button has been hit
    <INPUT id="calcFlag" name="calcFlag" value="NO" type="hidden" />
    // Hidden field to hold the number of selected dimensions have been set by the user
    <INPUT id="noSelections" name="noSelections" value="@mySelections" type="hidden" />
    <table style="background-color:khaki">
        <thead>CONDITIONS</thead>

        @{
            <tr>
                @*// SELECTION - Khaki/yellow block on screen*@
                @MakeSelection()
            </tr>
        }
    </table>
    <INPUT name="submit" id="submit" value="Update Selection" type="submit" />
    <button id="calcButton">Calculate</button>

    <table>
        <tr>
            <td>
                <table style="background-color:lawngreen">
                    <thead>GROUP BY</thead>
                    <tr>
                        @*// GROUP BY - Green block on screen*@
                        @MakeGroupBy()
                    </tr>

                </table>
            </td>

            <td>
                <table style="background-color:lightgrey">
                    <thead>SUM BY</thead>
                    <tr>
                        @*// SUM BY - Grey block on screen*@
                        @MakeSumBy()
                    </tr>

                </table>

            </td>
        </tr>

    </table>

    @*<p>@Model.SqlString</p>*@

    @*<INPUT name="submit" id="submit" value="Update Selection" type="submit" />
        <button id="calcButton">Calculate</button>*@

    if (Request.Form["select_0"] != null && Request.Form["select_0"] != null)
    {
        <script>
            $('#calcButton').click(function () {
                $('#calcFlag').val("YES");
                $('#calcButton').submit();
            });
        </script>
    }
}


@helper MakeSelection()
    {
        int mySelections = 0;
        List<int> mySelVal = new List<int>();
        if (Request.Form["noSelections"] != null)
        {
            mySelections = int.Parse(Request.Form["noSelections"]);
        }
        for (int i = 0; i <= mySelections; i++)
        {
            if (Request.Form["noSelVal_" + i.ToString()] != null && Request.Form["noSelVal_" + i.ToString()].Trim() != "")
            {
                mySelVal.Add(int.Parse(Request.Form["noSelVal_" + i.ToString()]));
            }
            else
            {
                mySelVal.Add(0);
            }
            <td style="vertical-align:top">
                <input id="noSelVal_@i" name="noSelVal_@i" value="@mySelVal[i]" type="hidden" />
                @{
                    var mySel = Request.Form["select_" + i.ToString()];
                    if (mySel == null) { mySel = "0"; }
                    string cselect = "";
                    <select name="select_@i" id="select_@i" onchange="CheckNoSelections(@i)">
                        <option value="0">Select property...</option>
                        @foreach (var item in Model.PropNameList)
                        {
                            if (item.PropertyId.ToString() == mySel) { cselect = "Selected"; }
                            else { cselect = ""; }
                            <option value="@item.PropertyId" @cselect>@item.PropertyName</option>
                        }
                    </select>


                    if (i < mySelections)
                    {
                        for (int j = 0; j <= mySelVal[i]; j++)
                        {
                            var tempSelVal = Request.Form["selValue_" + i.ToString() + "_" + j.ToString()];
                            if (tempSelVal == null) { tempSelVal = "0"; }
                            string cselectValue = "";


                            <br />
                            <select name="selValue_@(i)_@(j)" id="selVal_@(i)_@(j)" onchange="CheckNoSelValues(@i,@j)">
                                <option value="0">Select value...</option>
                                @foreach (var term in Model.PropValueLists[i])
                                {
                                    if (term.PropertyValueId.ToString() == tempSelVal) { cselectValue = "Selected"; }
                                    else { cselectValue = ""; }
                                    <option value="@term.PropertyValueId" @cselectValue>@term.PropertyValue</option>
                                }
                            </select>
                        }

                    }
                }
            </td>
        }

}

@helper MakeGroupBy()
    {
        string tempGroupBy = "";
        int noGroupBy = 0;
        if (Request.Form["noGroupBy"] != null)
        {
            noGroupBy = int.Parse(Request.Form["noGroupBy"]);
        }
        <INPUT id="noGroupBy" name="noGroupBy" value="@noGroupBy" type="hidden" />
        for (int i = 0; i <= noGroupBy; i++)
        {
            if (Request.Form["groupBy_" + i.ToString()] != null)
            {
                tempGroupBy = Request.Form["groupBy_" + i.ToString()];
            }
            <td>
                <select name="groupBy_@i" id="groupBy_@i" onchange="InitUpdate()">
                    <option value="0">Select value...</option>
                    @foreach (var term in Model.PropNameList)
                    {
                        var cSelGroupBy = "";
                        if (term.PropertyId.ToString() == tempGroupBy) { cSelGroupBy = "Selected"; }
                        else { cSelGroupBy = ""; }
                        <option value="@term.PropertyId" @cSelGroupBy>@term.PropertyName</option>
                    }
                </select>
            </td>
        }
        <td>
            <button onclick="AddGroupBy()">+</button>
            <button onclick="RemoveGroupBy()">-</button>
        </td>
        if (Model.ResultMatrix != null)
        {
            foreach (var term in Model.ResultMatrix)
            {
                <tr>
                    @{
                        foreach (var term1 in term.PropertyName)
                        {
                            <td>@term1</td>
                        }
                    }
                </tr>

            }
        }

}

@helper MakeSumBy()
    {
        string tempSumBy = "";
        int noSumBy = 0;
        if (Request.Form["noSumBy"] != null)
        {
            noSumBy = int.Parse(Request.Form["noSumBy"]);
        }
        <INPUT id="noSumBy" name="noSumBy" value="@noSumBy" type="hidden" />
        for (int i = 0; i <= noSumBy; i++)
        {
            if (Request.Form["SumBy_" + i.ToString()] != null)
            {
                tempSumBy = Request.Form["sumBy_" + i.ToString()];
            }
            <td>
                <select name="sumBy_@i" id="sumBy_@i" onchange="">
                    <option value="0">Select value...</option>
                    @foreach (var term in Model.DataNameList)
                    {
                        var cSelSumBy = "";
                        if (term.DataId.ToString() == tempSumBy) { cSelSumBy = "Selected"; }
                        else { cSelSumBy = ""; }
                        <option value="@term.DataId" @cSelSumBy>@term.Data_Name</option>
                    }
                </select>
            </td>
        }
        <td>

            <button onclick="AddSumBy()">+</button>
            <button onclick="RemoveSumBy()">-</button>
        </td>
        if (Model.ResultMatrix != null)
        {
            foreach (var term in Model.ResultMatrix)
            {
                <tr>
                    @{
                        foreach (var term1 in term.DataSum)
                        {
                            <td style="text-align:right">@term1</td>
                        }
                    }
                </tr>

            }
        }

}

@helper MakeResultMatrix()
    {
        foreach (var term in Model.ResultMatrix)
        {
            <tr>
                @{
                    foreach (var myProp in term.PropertyName)
                    {
                        <td>@myProp</td>
                    }
                    foreach (var myDataSum in term.DataSum)
                    {
                        <td>@myDataSum</td>
                    }
                }

            </tr>
        }
}

<script>
    function CheckNoSelections(i) {
        if (i == document.getElementById("noSelections").value) {
            document.getElementById("noSelections").value++;
        }
    }

    function CheckNoSelValues(i, j) {
        if (j == document.getElementById("noSelVal_" + i.toString()).value) {
            document.getElementById("noSelVal_" + i.toString()).value++;
        }
    }


    function AddGroupBy() {
        document.getElementById("noGroupBy").value++;
    }

    function RemoveGroupBy() {
        if (document.getElementById("noGroupBy").value > 0) {
            document.getElementById("noGroupBy").value--;
        }
    }

    function AddSumBy() {
        document.getElementById("noSumBy").value++;
    }

    function RemoveSumBy() {
        if (document.getElementById("noSumBy").value > 0) {
            document.getElementById("noSumBy").value--;
        }
    }


</script>
